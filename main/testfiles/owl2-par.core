# ./go.sh testfiles/owl2-step3.core --sacrifice

Prefix(rdf  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
 Prefix(rdfs <http://www.w3.org/2000/01/rdf-schema#>)
 Prefix(owl  <http://www.w3.org/2002/07/owl#>)
 Prefix(xsd  <http://www.w3.org/2001/XMLSchema#>)
 Prefix(rif  <http://www.w3.org/2007/rif#>)
 Prefix(func <http://www.w3.org/2007/rif-builtin-function#>)
 Prefix(pred <http://www.w3.org/2007/rif-builtin-predicate#>)
 Prefix(dc   <http://purl.org/dc/terms/>)

#DEFINE IN External(pred:list-contains(
#DEFINE /IN ))
#DEFINE NOTIN Not({IN}
#DEFINE /NOTIN {/IN})

#DEFINE $MC List(owl:FunctionalProperty owl:InverseFunctionalProperty owl:IrreflexiveProperty owl:SymmetricProperty owl:AsymmetricProperty owl:TransitiveProperty owl:Class owl:ObjectProperty owl:DatatypeProperty owl:AllDifferent owl:AllDisjointProperties owl:AllDisjointClasses)
#DEFINE $MP List(rdfs:domain rdfs:range rdfs:subPropertyOf owl:equivalentProperty owl:propertyDisjointWith owl:inverseOf owl:someValuesFrom owl:onProperty owl:allValuesFrom owl:hasValue owl:onClass rdfs:subClassOf owl:equivalentClass owl:disjointWith owl:complementOf owl:distinctMembers owl:members owl:propertyChainAxiom owl:intersectionOf owl:hasKey owl:unionOf owl:oneOf rdf:first rdf:rest owl:maxCardinality owl:maxQualifiedCardinality)
#DEFINE $MPT List(rdfs:domain rdfs:range rdfs:subPropertyOf owl:equivalentProperty owl:propertyDisjointWith owl:inverseOf owl:someValuesFrom owl:onProperty owl:allValuesFrom owl:hasValue owl:onClass rdfs:subClassOf owl:equivalentClass owl:disjointWith owl:complementOf owl:distinctMembers owl:members owl:propertyChainAxiom owl:intersectionOf owl:hasKey owl:unionOf owl:oneOf rdf:first rdf:rest owl:maxCardinality owl:maxQualifiedCardinality rdf:type)

# REPLICATE ONTOLOGY
#PRAGMA REPLICATE And(?s[?p->?o] {IN}{$MP} ?p{/IN})
#PRAGMA REPLICATE And(?s[rdf:type->?o] {IN}{$MC} ?o{/IN})
#PRAGMA REPLICATE And(_markAllTypes(?a ?b))
#PRAGMA REPLICATE And(_allTypes(?a ?b ?c))
#PRAGMA REPLICATE And(_checkUnionOf(?a ?b))
#PRAGMA REPLICATE And(_checkDifferent(?a ?b))
#PRAGMA REPLICATE And(_checkDisjointProperties(?a ?b))
#PRAGMA REPLICATE And(_checkDisjointClasses(?a ?b))
#PRAGMA REPLICATE And(_markCheckChain(?a ?b))
#PRAGMA REPLICATE And(_checkChain(?a ?b ?c ?d))
#PRAGMA REPLICATE And(_markSameKey(?a ?b))
#PRAGMA REPLICATE And(_sameKey(?a ?b ?c ?d))

# REPLICATE BUILTINS (pred:list-contains special, don't worry about it)

# REPLICATE SELECTIVE PATTERNS
#PRAGMA REPLICATE And(?a = ?b)

#PRAGMA ARBITRARY And(?s[?p->?o] {NOTIN}{$MPT} ?p{/NOTIN})
#PRAGMA ARBITRARY And(?s[rdf:type->?o] {NOTIN}{$MC} ?o{/NOTIN})

(* <#scm-int> *)
 Forall ?c ?l (
	 _markAllTypes(?c ?l) :- ?c[owl:intersectionOf->?l] )

 Forall ?c ?l ?r (
	 _markAllTypes(?c ?l) :- And (
		 _markAllTypes(?c ?r)
		 ?r[rdf:rest->?l]
		 Not(?l = rdf:nil) ))

 Forall ?c ?ci ?l (
   ?c[rdfs:subClassOf->?ci] :- And (
		 _markAllTypes(?c ?l)
		 ?l[rdf:first->?ci] ))

(* <#scm-uni> *)
 Forall ?c ?l (
	 _checkUnionOf(?c ?l) :- ?c[owl:unionOf->?l] )

 Forall ?c ?l ?r (
	 _checkUnionOf(?c ?l) :- And(
		 _checkUnionOf(?c ?r)
		 ?r[rdf:rest->?l]
		 Not(?l = rdf:nil) ))

 Forall ?c ?ci ?l (
   ?ci[rdfs:subClassOf->?c] :- And (
		 _checkUnionOf(?c ?l)
		 ?l[rdf:first->?ci] ))
 
(* <#scm-cls> *)
Forall ?c (
   ?c[rdfs:subClassOf->?c] :- ?c[rdf:type->owl:Class])

(* <#scm-cls1> *)
Forall ?c (
   ?c[owl:equivalentClass->?c] :- ?c[rdf:type->owl:Class])

(* <#scm-cls2> *)
Forall ?c (
   ?c[rdfs:subClassOf->owl:Thing] :- ?c[rdf:type->owl:Class])

(* <#scm-cls3> *)
Forall ?c (
   owl:Nothing[rdfs:subClassOf->?c] :- ?c[rdf:type->owl:Class])

(* <#scm-sco> *)
Forall ?c1 ?c2 ?c3 (
   ?c1[rdfs:subClassOf->?c3] :- And(
       ?c1[rdfs:subClassOf->?c2]
       ?c2[rdfs:subClassOf->?c3]  ))

(* <#scm-eqc1> *)
Forall ?c1 ?c2 (
   ?c1[rdfs:subClassOf->?c2] :- ?c1[owl:equivalentClass->?c2])

(* <#scm-eqc11> *)
Forall ?c1 ?c2 (
   ?c2[rdfs:subClassOf->?c1] :- ?c1[owl:equivalentClass->?c2])

(* <#scm-eqc2> *)
Forall ?c1 ?c2 (
   ?c1[owl:equivalentClass->?c2] :- And(
       ?c1[rdfs:subClassOf->?c2]
       ?c2[rdfs:subClassOf->?c1]  ))

(* <#scm-op> *)
Forall ?p (
   ?p[rdfs:subPropertyOf->?p] :- ?p[rdf:type->owl:ObjectProperty])

(* <#scm-op1> *)
Forall ?p (
   ?p[owl:equivalentProperty->?p] :- ?p[rdf:type->owl:ObjectProperty])

(* <#scm-dp> *)
Forall ?p (
   ?p[rdfs:subPropertyOf->?p] :- ?p[rdf:type->owl:DatatypeProperty])

(* <#scm-dp1> *)
Forall ?p (
   ?p[owl:equivalentProperty->?p] :- ?p[rdf:type->owl:DatatypeProperty])

(* <#scm-spo> *)
Forall ?p3 ?p2 ?p1 (
   ?p1[rdfs:subPropertyOf->?p3] :- And(
       ?p1[rdfs:subPropertyOf->?p2]
       ?p2[rdfs:subPropertyOf->?p3]  ))

(* <#scm-eqp1> *)
Forall ?p2 ?p1 (
   ?p1[rdfs:subPropertyOf->?p2] :- ?p1[owl:equivalentProperty->?p2])

(* <#scm-eqp11> *)
Forall ?p2 ?p1 (
   ?p2[rdfs:subPropertyOf->?p1] :- ?p1[owl:equivalentProperty->?p2])

(* <#scm-eqp2> *)
Forall ?p2 ?p1 (
   ?p1[owl:equivalentProperty->?p2] :- And(
       ?p1[rdfs:subPropertyOf->?p2]
       ?p2[rdfs:subPropertyOf->?p1]  ))

(* <#scm-dom1> *)
Forall ?p ?c1 ?c2 (
   ?p[rdfs:domain->?c2] :- And(
       ?p[rdfs:domain->?c1]
       ?c1[rdfs:subClassOf->?c2]  ))

(* <#scm-dom2> *)
Forall ?c ?p2 ?p1 (
   ?p1[rdfs:domain->?c] :- And(
       ?p2[rdfs:domain->?c]
       ?p1[rdfs:subPropertyOf->?p2]  ))

(* <#scm-rng1> *)
Forall ?p ?c1 ?c2 (
   ?p[rdfs:range->?c2] :- And(
       ?p[rdfs:range->?c1]
       ?c1[rdfs:subClassOf->?c2]  ))

(* <#scm-rng2> *)
Forall ?c ?p2 ?p1 (
   ?p1[rdfs:range->?c] :- And(
       ?p2[rdfs:range->?c]
       ?p1[rdfs:subPropertyOf->?p2]  ))

(* <#scm-hv> *)
Forall ?c1 ?c2 ?i ?p2 ?p1 (
   ?c1[rdfs:subClassOf->?c2] :- And(
       ?c1[owl:hasValue->?i]
       ?c1[owl:onProperty->?p1]
       ?c2[owl:hasValue->?i]
       ?c2[owl:onProperty->?p2]
       ?p1[rdfs:subPropertyOf->?p2]  ))

(* <#scm-svf1> *)
Forall ?p ?y2 ?c1 ?c2 ?y1 (
   ?c1[rdfs:subClassOf->?c2] :- And(
       ?c1[owl:someValuesFrom->?y1]
       ?c1[owl:onProperty->?p]
       ?c2[owl:someValuesFrom->?y2]
       ?c2[owl:onProperty->?p]
       ?y1[rdfs:subClassOf->?y2]  ))

(* <#scm-svf2> *)
Forall ?c1 ?c2 ?y ?p2 ?p1 (
   ?c1[rdfs:subClassOf->?c2] :- And(
       ?c1[owl:someValuesFrom->?y]
       ?c1[owl:onProperty->?p1]
       ?c2[owl:someValuesFrom->?y]
       ?c2[owl:onProperty->?p2]
       ?p1[rdfs:subPropertyOf->?p2]  ))

(* <#scm-avf1> *)
Forall ?p ?y2 ?c1 ?c2 ?y1 (
   ?c1[rdfs:subClassOf->?c2] :- And(
       ?c1[owl:allValuesFrom->?y1]
       ?c1[owl:onProperty->?p]
       ?c2[owl:allValuesFrom->?y2]
       ?c2[owl:onProperty->?p]
       ?y1[rdfs:subClassOf->?y2]  ))

(* <#scm-avf2> *)
Forall ?c1 ?c2 ?y ?p2 ?p1 (
   ?c2[rdfs:subClassOf->?c1] :- And(
       ?c1[owl:allValuesFrom->?y]
       ?c1[owl:onProperty->?p1]
       ?c2[owl:allValuesFrom->?y]
       ?c2[owl:onProperty->?p2]
       ?p1[rdfs:subPropertyOf->?p2]  ))

(* <#eq-ref> *)
Forall ?p ?o ?s (
   ?s[owl:sameAs->?s] :- ?s[?p->?o])

(* <#eq-ref1> *)
Forall ?p ?o ?s (
   ?p[owl:sameAs->?p] :- ?s[?p->?o])

(* <#eq-ref2> *)
Forall ?p ?o ?s (
   ?o[owl:sameAs->?o] :- ?s[?p->?o])

(* <#eq-sym> *)
Forall ?x ?y (
   ?y[owl:sameAs->?x] :- ?x[owl:sameAs->?y])

#ELIMINATED
#(* <#eq-trans> *)
#Forall ?x ?z ?y (
#   ?x[owl:sameAs->?z] :- And(
#       ?x[owl:sameAs->?y]
#       ?y[owl:sameAs->?z]  ))

#SPLIT
#ELIMINATED
#(* <#eq-rep-s> *)
#Forall ?p ?o ?s ?s2 (
#   ?s2[?p->?o] :- And(
#       ?s[owl:sameAs->?s2]
#       ?s[?p->?o]
#			 {NOTIN}{$MPT} ?p{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?o ?s ?s2 (
#   ?s2[?p->?o] :- And(
#       ?s[owl:sameAs->?s2]
#       ?s[?p->?o]
#			 {IN}{$MP} ?p{/IN}  ))

#ELIMINATED
#Forall ?p ?o ?s ?s2 (
#   ?s2[rdf:type->?o] :- And(
#       ?s[owl:sameAs->?s2]
#       ?s[rdf:type->?o]
#			 {NOTIN}{$MC} ?o{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?o ?s ?s2 (
#   ?s2[rdf:type->?o] :- And(
#       ?s[owl:sameAs->?s2]
#       ?s[rdf:type->?o]
#			 {IN}{$MC} ?o{/IN}  ))

#SPLIT
#ELIMINATED
#(* <#eq-rep-p> *)
#Forall ?p ?o ?s ?p2 (
#   ?s[?p2->?o] :- And(
#       ?p[owl:sameAs->?p2]
#       ?s[?p->?o]
#			 {NOTIN}{$MPT} ?p2{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?o ?s ?p2 (
#   ?s[?p2->?o] :- And(
#       ?p[owl:sameAs->?p2]
#       ?s[?p->?o]
#			 {IN}{$MP} ?p2{/IN}  ))

#ELIMINATED
#Forall ?p ?o ?s ?p2 (
#   ?s[rdf:type->?o] :- And(
#       ?p[owl:sameAs->rdf:type]
#       ?s[?p->?o]
#			 {NOTIN}{$MC} ?o{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?o ?s ?p2 (
#   ?s[rdf:type->?o] :- And(
#       ?p[owl:sameAs->rdf:type]
#       ?s[?p->?o]
#			 {IN}{$MC} ?o{/IN}  ))

#SPLIT
#ELIMINATED
#(* <#eq-rep-o> *)
#Forall ?p ?o ?s ?o2 (
#   ?s[?p->?o2] :- And(
#       ?o[owl:sameAs->?o2]
#       ?s[?p->?o]
#			 {NOTIN}{$MPT} ?p{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?o ?s ?o2 (
#   ?s[?p->?o2] :- And(
#       ?o[owl:sameAs->?o2]
#       ?s[?p->?o]
#			 {IN}{$MP} ?p{/IN}  ))

#ELIMINATED
#Forall ?p ?o ?s ?o2 (
#   ?s[rdf:type->?o2] :- And(
#       ?o[owl:sameAs->?o2]
#       ?s[rdf:type->?o]
#			 {NOTIN}{$MC} ?o2{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?o ?s ?o2 (
#   ?s[rdf:type->?o2] :- And(
#       ?o[owl:sameAs->?o2]
#       ?s[rdf:type->?o]
#			 {IN}{$MC} ?o2{/IN}  ))

#ELIMINATED
#(* <#eq-diff1> *)
#Forall ?x ?y (
#   rif:error() :- And(
#       ?x[owl:sameAs->?y]
#       ?x[owl:differentFrom->?y]  ))

(* <#prp-ap-label> *)
    rdfs:label[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-comment> *)
   rdfs:comment[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-seeAlso> *)
   rdfs:seeAlso[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-isDefinedBy> *)
   rdfs:isDefinedBy[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-deprecated> *)
   owl:deprecated[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-priorVersion> *)
   owl:priorVersion[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-backwardCompatibleWith> *)
   owl:backwardCompatibleWith[rdf:type->owl:AnnotationProperty]

(* <#prp-ap-incompatibleWith> *)
   owl:incompatibleWith[rdf:type->owl:AnnotationProperty]

#SPLIT
(* <#prp-dom> *)
Forall ?p ?c ?x ?y (
   ?x[rdf:type->?c] :- And(
       ?p[rdfs:domain->?c]
       ?x[?p->?y]
			 {NOTIN}{$MC} ?c{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?c ?x ?y (
#   ?x[rdf:type->?c] :- And(
#       ?p[rdfs:domain->?c]
#       ?x[?p->?y]
#			 {IN}{$MC} ?c{/IN}  ))

#SPLIT
(* <#prp-rng> *)
Forall ?p ?c ?x ?y (
   ?y[rdf:type->?c] :- And(
       ?p[rdfs:range->?c]
       ?x[?p->?y]
			 {NOTIN}{$MC} ?c{/NOTIN}  ))

#ELIMINATED
#(* <#prp-rng> *)
#Forall ?p ?c ?x ?y (
#   ?y[rdf:type->?c] :- And(
#       ?p[rdfs:range->?c]
#       ?x[?p->?y]
#			 {IN}{$MC} ?c{/IN}  ))

#ELIMINATED
#(* <#prp-fp> *)
#Forall ?p ?y2 ?x ?y1 (
#   ?y1[owl:sameAs->?y2] :- And(
#       ?p[rdf:type->owl:FunctionalProperty]
#       ?x[?p->?y1]
#       ?x[?p->?y2]  ))

#ELIMINATED
#(* <#prp-ifp> *)
#Forall ?p ?x1 ?x2 ?y (
#   ?x1[owl:sameAs->?x2] :- And(
#       ?p[rdf:type->owl:InverseFunctionalProperty]
#       ?x1[?p->?y]
#       ?x2[?p->?y]  ))

(* <#prp-irp> *)
Forall ?p ?x (
   rif:error() :- And(
       ?p[rdf:type->owl:IrreflexiveProperty]
       ?x[?p->?x]  ))

#SPLIT
(* <#prp-symp> *)
Forall ?p ?x ?y (
   ?y[?p->?x] :- And(
       ?p[rdf:type->owl:SymmetricProperty]
       ?x[?p->?y]
			 {NOTIN}{$MPT} ?p{/NOTIN}  ))

Forall ?p ?x ?y (
   ?y[?p->?x] :- And(
       ?p[rdf:type->owl:SymmetricProperty]
       ?x[?p->?y]
			 {IN}{$MP} ?p{/IN}  ))

Forall ?p ?x ?y (
   ?y[rdf:type->?x] :- And(
       rdf:type[rdf:type->owl:SymmetricProperty]
       ?x[rdf:type->?y]
			 {NOTIN}{$MC} ?x{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?x ?y (
#   ?y[rdf:type->?x] :- And(
#       rdf:type[rdf:type->owl:SymmetricProperty]
#       ?x[rdf:type->?y]
#			 {IN}{$MC} ?x{/IN}  ))

#ELIMINATED
#(* <#prp-asyp> *)
#Forall ?p ?x ?y (
#   rif:error() :- And(
#       ?p[rdf:type->owl:AsymmetricProperty]
#       ?x[?p->?y]
#       ?y[?p->?x]  ))

#SPLIT
#ELIMINATED
#(* <#prp-trp> *)
#Forall ?p ?x ?z ?y (
#   ?x[?p->?z] :- And(
#       ?p[rdf:type->owl:TransitiveProperty]
#       ?x[?p->?y]
#       ?y[?p->?z]
#			 {NOTIN}{$MPT} ?p{/NOTIN}  ))

Forall ?p ?x ?z ?y (
   ?x[?p->?z] :- And(
       ?p[rdf:type->owl:TransitiveProperty]
       ?x[?p->?y]
       ?y[?p->?z]
			 {IN}{$MP} ?p{/IN}  ))

#ELIMINATED
#Forall ?p ?x ?z ?y (
#   ?x[rdf:type->?z] :- And(
#       rdf:type[rdf:type->owl:TransitiveProperty]
#       ?x[rdf:type->?y]
#       ?y[rdf:type->?z]
#			 {NOTIN}{$MC} ?z{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?x ?z ?y (
#   ?x[rdf:type->?z] :- And(
#       rdf:type[rdf:type->owl:TransitiveProperty]
#       ?x[rdf:type->?y]
#       ?y[rdf:type->?z]
#			 {IN}{$MC} ?z{/IN}  ))

#SPLIT
(* <#prp-spo1> *)
Forall ?x ?y ?p2 ?p1 (
   ?x[?p2->?y] :- And(
       ?p1[rdfs:subPropertyOf->?p2]
       ?x[?p1->?y]
			 {NOTIN}{$MPT} ?p2{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?y ?p2 ?p1 (
#   ?x[?p2->?y] :- And(
#       ?p1[rdfs:subPropertyOf->?p2]
#       ?x[?p1->?y]
#			 {IN}{$MP} ?p2{/IN}  ))

Forall ?x ?y ?p2 ?p1 (
   ?x[rdf:type->?y] :- And(
       ?p1[rdfs:subPropertyOf->rdf:type]
       ?x[?p1->?y]
			 {NOTIN}{$MC} ?y{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?y ?p2 ?p1 (
#   ?x[rdf:type->?y] :- And(
#       ?p1[rdfs:subPropertyOf->rdf:type]
#       ?x[?p1->?y]
#			 {IN}{$MC} ?y{/IN}  ))

#SPLIT
(* <#prp-eqp1> *)
Forall ?x ?y ?p2 ?p1 (
   ?x[?p2->?y] :- And(
       ?p1[owl:equivalentProperty->?p2]
       ?x[?p1->?y]
			 {NOTIN}{$MPT} ?p2{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?y ?p2 ?p1 (
#   ?x[?p2->?y] :- And(
#       ?p1[owl:equivalentProperty->?p2]
#       ?x[?p1->?y]
#			 {IN}{$MP} ?p2{/IN}  ))

Forall ?x ?y ?p2 ?p1 (
   ?x[rdf:type->?y] :- And(
       ?p1[owl:equivalentProperty->rdf:type]
       ?x[?p1->?y]
			 {NOTIN}{$MC} ?y{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?y ?p2 ?p1 (
#   ?x[rdf:type->?y] :- And(
#       ?p1[owl:equivalentProperty->rdf:type]
#       ?x[?p1->?y]
#			 {IN}{$MC} ?y{/IN}  ))

#SPLIT
(* <#prp-eqp2> *)
Forall ?x ?y ?p2 ?p1 (
   ?x[?p1->?y] :- And(
       ?p1[owl:equivalentProperty->?p2]
       ?x[?p2->?y]
			 {NOTIN}{$MPT} ?p1{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?y ?p2 ?p1 (
#   ?x[?p1->?y] :- And(
#       ?p1[owl:equivalentProperty->?p2]
#       ?x[?p2->?y]
#			 {IN}{$MP} ?p1{/IN}  ))

Forall ?x ?y ?p2 ?p1 (
   ?x[rdf:type->?y] :- And(
       rdf:type[owl:equivalentProperty->?p2]
       ?x[?p2->?y]
			 {NOTIN}{$MC} ?y{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?y ?p2 ?p1 (
#   ?x[rdf:type->?y] :- And(
#       rdf:type[owl:equivalentProperty->?p2]
#       ?x[?p2->?y]
#			 {IN}{$MC} ?y{/IN}  ))

#ELIMINATED
#(* <#prp-pdw> *)
#Forall ?x ?y ?p2 ?p1 (
#   rif:error() :- And(
#       ?p1[owl:propertyDisjointWith->?p2]
#       ?x[?p1->?y]
#       ?x[?p2->?y]  ))

#SPLIT
(* <#prp-inv1> *)
Forall ?x ?y ?p2 ?p1 (
   ?y[?p2->?x] :- And(
       ?p1[owl:inverseOf->?p2]
       ?x[?p1->?y]
			 {NOTIN}{$MPT} ?p2{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?y ?p2 ?p1 (
#   ?y[?p2->?x] :- And(
#       ?p1[owl:inverseOf->?p2]
#       ?x[?p1->?y]
#			 {IN}{$MP} ?p2{/IN}  ))

Forall ?x ?y ?p2 ?p1 (
   ?y[rdf:type->?x] :- And(
       ?p1[owl:inverseOf->rdf:type]
       ?x[?p1->?y]
			 {NOTIN}{$MC} ?x{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?y ?p2 ?p1 (
#   ?y[rdf:type->?x] :- And(
#       ?p1[owl:inverseOf->rdf:type]
#       ?x[?p1->?y]
#			 {IN}{$MC} ?x{/IN}  ))

#SPLIT
(* <#prp-inv2> *)
Forall ?x ?y ?p2 ?p1 (
   ?y[?p1->?x] :- And(
       ?p1[owl:inverseOf->?p2]
       ?x[?p2->?y]
			 {NOTIN}{$MPT} ?p1{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?y ?p2 ?p1 (
#   ?y[?p1->?x] :- And(
#       ?p1[owl:inverseOf->?p2]
#       ?x[?p2->?y]
#			 {IN}{$MP} ?p1{/IN}  ))

Forall ?x ?y ?p2 ?p1 (
   ?y[rdf:type->?x] :- And(
       rdf:type[owl:inverseOf->?p2]
       ?x[?p2->?y]
			 {NOTIN}{$MC} ?x{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?y ?p2 ?p1 (
#   ?y[rdf:type->?x] :- And(
#       rdf:type[owl:inverseOf->?p2]
#       ?x[?p2->?y]
#			 {IN}{$MC} ?x{/IN}  ))

(* <#cls-thing> *)
   owl:Thing[rdf:type->owl:Class]

(* <#cls-nothing1> *)
    owl:Nothing[rdf:type->owl:Class]

(* <#cls-nothing2> *)
Forall ?x (
   rif:error() :- ?x[rdf:type->owl:Nothing])

#SPLIT
#ELIMINATED
#(* <#cls-svf1> *)
#Forall ?p ?v ?u ?x ?y (
#   ?u[rdf:type->?x] :- And(
#       ?x[owl:someValuesFrom->?y]
#       ?x[owl:onProperty->?p]
#       ?u[?p->?v]
#       ?v[rdf:type->?y]
#			 {NOTIN}{$MC} ?x{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?v ?u ?x ?y (
#   ?u[rdf:type->?x] :- And(
#       ?x[owl:someValuesFrom->?y]
#       ?x[owl:onProperty->?p]
#       ?u[?p->?v]
#       ?v[rdf:type->?y]
#			 {IN}{$MC} ?x{/IN}  ))

#SPLIT
(* <#cls-svf2> *)
Forall ?p ?v ?u ?x (
   ?u[rdf:type->?x] :- And(
       ?x[owl:someValuesFrom->owl:Thing]
       ?x[owl:onProperty->?p]
       ?u[?p->?v]
			 {NOTIN}{$MC} ?x{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?v ?u ?x (
#   ?u[rdf:type->?x] :- And(
#       ?x[owl:someValuesFrom->owl:Thing]
#       ?x[owl:onProperty->?p]
#       ?u[?p->?v]
#			 {IN}{$MC} ?x{/IN}  ))

#SPLIT
#ELIMINATED
#(* <#cls-avf> *)
#Forall ?p ?v ?u ?x ?y (
#   ?v[rdf:type->?y] :- And(
#       ?x[owl:allValuesFrom->?y]
#       ?x[owl:onProperty->?p]
#       ?u[rdf:type->?x]
#       ?u[?p->?v]
#			 {NOTIN}{$MC} ?y{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?v ?u ?x ?y (
#   ?v[rdf:type->?y] :- And(
#       ?x[owl:allValuesFrom->?y]
#       ?x[owl:onProperty->?p]
#       ?u[rdf:type->?x]
#       ?u[?p->?v]
#			 {IN}{$MC} ?y{/IN}  ))

#SPLIT
(* <#cls-hv1> *)
Forall ?p ?u ?x ?y (
   ?u[?p->?y] :- And(
       ?x[owl:hasValue->?y]
       ?x[owl:onProperty->?p]
       ?u[rdf:type->?x]
			 {NOTIN}{$MPT} ?p{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?u ?x ?y (
#   ?u[?p->?y] :- And(
#       ?x[owl:hasValue->?y]
#       ?x[owl:onProperty->?p]
#       ?u[rdf:type->?x]
#			 {IN}{$MP} ?p{/IN}  ))

Forall ?p ?u ?x ?y (
   ?u[rdf:type->?y] :- And(
       ?x[owl:hasValue->?y]
       ?x[owl:onProperty->rdf:type]
       ?u[rdf:type->?x]
			 {NOTIN}{$MC} ?y{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?u ?x ?y (
#   ?u[rdf:type->?y] :- And(
#       ?x[owl:hasValue->?y]
#       ?x[owl:onProperty->rdf:type]
#       ?u[rdf:type->?x]
#			 {IN}{$MC} ?y{/IN}  ))

#SPLIT
(* <#cls-hv2> *)
Forall ?p ?u ?x ?y (
   ?u[rdf:type->?x] :- And(
       ?x[owl:hasValue->?y]
       ?x[owl:onProperty->?p]
       ?u[?p->?y]
			 {NOTIN}{$MC} ?x{/NOTIN}  ))

#ELIMINATED
#Forall ?p ?u ?x ?y (
#   ?u[rdf:type->?x] :- And(
#       ?x[owl:hasValue->?y]
#       ?x[owl:onProperty->?p]
#       ?u[?p->?y]
#			 {IN}{$MC} ?x{/IN}  ))

#ELIMINATED
#(* <#cls-maxc1> *)
#Forall ?p ?u ?x ?y (
#   rif:error() :- And(
#       ?x[owl:maxCardinality->0]
#       ?x[owl:onProperty->?p]
#       ?u[rdf:type->?x]
#       ?u[?p->?y]  ))

#ELIMINATED
#(* <#cls-maxc2> *)
#Forall ?p ?y2 ?u ?x ?y1 (
#   ?y1[owl:sameAs->?y2] :- And(
#       ?x[owl:maxCardinality->1]
#       ?x[owl:onProperty->?p]
#       ?u[rdf:type->?x]
#       ?u[?p->?y1]
#       ?u[?p->?y2]  ))

#ELIMINATED
#(* <#cls-maxqc1> *)
#Forall ?p ?c ?u ?x ?y (
#   rif:error() :- And(
#       ?x[owl:maxQualifiedCardinality->0]
#       ?x[owl:onProperty->?p]
#       ?x[owl:onClass->?c]
#       ?u[rdf:type->?x]
#       ?u[?p->?y]
#       ?y[rdf:type->?c]  ))

#ELIMINATED
#(* <#cls-maxqc2> *)
#Forall ?p ?u ?x ?y (
#   rif:error() :- And(
#       ?x[owl:maxQualifiedCardinality->0]
#       ?x[owl:onProperty->?p]
#       ?x[owl:onClass->owl:Thing]
#       ?u[rdf:type->?x]
#       ?u[?p->?y]  ))

#ELIMINATED
#(* <#cls-maxqc3> *)
#Forall ?p ?y2 ?c ?u ?x ?y1 (
#   ?y1[owl:sameAs->?y2] :- And(
#       ?x[owl:maxQualifiedCardinality->1]
#       ?x[owl:onProperty->?p]
#       ?x[owl:onClass->?c]
#       ?u[rdf:type->?x]
#       ?u[?p->?y1]
#       ?y1[rdf:type->?c]
#       ?u[?p->?y2]
#       ?y2[rdf:type->?c]  ))

#ELIMINATED
#(* <#cls-maxqc4> *)
#Forall ?p ?y2 ?u ?x ?y1 (
#   ?y1[owl:sameAs->?y2] :- And(
#       ?x[owl:maxQualifiedCardinality->1]
#       ?x[owl:onProperty->?p]
#       ?x[owl:onClass->owl:Thing]
#       ?u[rdf:type->?x]
#       ?u[?p->?y1]
#       ?u[?p->?y2]  ))

#SPLIT
(* <#cax-sco> *)
Forall ?x ?c1 ?c2 (
   ?x[rdf:type->?c2] :- And(
       ?c1[rdfs:subClassOf->?c2]
       ?x[rdf:type->?c1]
			 {NOTIN}{$MC} ?c2{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?c1 ?c2 (
#   ?x[rdf:type->?c2] :- And(
#       ?c1[rdfs:subClassOf->?c2]
#       ?x[rdf:type->?c1]
#			 {IN}{$MC} ?c2{/IN}  ))

#SPLIT
(* <#cax-eqc1> *)
Forall ?x ?c1 ?c2 (
   ?x[rdf:type->?c2] :- And(
       ?c1[owl:equivalentClass->?c2]
       ?x[rdf:type->?c1]
			 {NOTIN}{$MC} ?c2{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?c1 ?c2 (
#   ?x[rdf:type->?c2] :- And(
#       ?c1[owl:equivalentClass->?c2]
#       ?x[rdf:type->?c1]
#			 {IN}{$MC} ?c2{/IN}  ))

#SPLIT
(* <#cax-eqc2> *)
Forall ?x ?c1 ?c2 (
   ?x[rdf:type->?c1] :- And(
       ?c1[owl:equivalentClass->?c2]
       ?x[rdf:type->?c2]
			 {NOTIN}{$MC} ?c1{/NOTIN}  ))

#ELIMINATED
#Forall ?x ?c1 ?c2 (
#   ?x[rdf:type->?c1] :- And(
#       ?c1[owl:equivalentClass->?c2]
#       ?x[rdf:type->?c2]
#			 {IN}{$MC} ?c1{/IN}  ))

#ELIMINATED
#(* <#cax-dw> *)
#Forall ?x ?c1 ?c2 (
#   rif:error() :- And(
#       ?c1[owl:disjointWith->?c2]
#       ?x[rdf:type->?c1]
#       ?x[rdf:type->?c2]  ))

#ELIMINATED
#(* <#prp-npa1> *)
#Forall ?x ?i1 ?p ?i2 (
#    rif:error() :- And(
#       ?x[owl:sourceIndividual->?i1]
#       ?x[owl:assertionProperty->?p]
#       ?x[owl:targetIndividual->?i2]
#       ?i1[?p->?i2] ))

#ELIMINATED
#(* <#prp-npa2> *)
#Forall ?x ?i ?p ?lt (
#    rif:error() :- And(
#       ?x[owl:sourceIndividual->?i]
#       ?x[owl:assertionProperty->?p]
#       ?x[owl:targetValue->?lt]
#       ?i[?p->?lt] ))

#ELIMINATED
#(* <#cax-dw> *)
#Forall ?c1 ?c2 ?x (
#    rif:error() :- And(
#       ?c1[owl:disjointWith->?c2]
#       ?x[rdf:type->?c1]
#       ?x[rdf:type->?c2] ))

#ELIMINATED
#(* <#cls-com> *)
#Forall ?c1 ?c2 ?x (
#    rif:error() :- And(
#       ?c1[owl:complementOf->?c2]
#       ?x[rdf:type->?c1]
#       ?x[rdf:type->?c2] ))


(* <#eq-diff2-3> *)
 Forall ?x ?y (
	 _checkDifferent(?x ?y) :- And (
		 ?x[rdf:type->owl:AllDifferent]
		 ?x[owl:distinctMembers->?y] ))

 Forall ?x ?y (
	 _checkDifferent(?x ?y) :- And (
		 ?x[rdf:type->owl:AllDifferent]
		 ?x[owl:members->?y] ))

 Forall ?x ?y ?z (
	 _checkDifferent(?x ?y) :- And (
		 _checkDifferent(?x ?z)
		 ?z[rdf:rest->?y]
		 Not(?y = rdf:nil) ))

 Forall ?x ?y1 ?y2 ?z1 ?z2 (
   rif:error() :- And (
			 _checkDifferent(?x ?y1)
			 _checkDifferent(?x ?y2)
			 Not(?y1 = ?y2)
			 ?y1[rdf:first->?z1]
			 ?y2[rdf:first->?z2]
       ?z1[owl:sameAs->?z2] ))

#AUXILIARY ELIMINATION
#(* <#prp-adp> *)
# Forall ?r ?l (
#	 _checkDisjointProperties(?r ?l) :- And (
#		 ?r[rdf:type->owl:AllDisjointProperties]
#		 ?r[owl:members -> ?l] ))

#AUXILIARY ELIMINATION
# Forall ?r ?l ?x (
#	 _checkDisjointProperties(?r ?l) :- And (
#		 _checkDisjointProperties(?r ?x)
#		 ?x[rdf:rest->?l]
#		 Not(?l = rdf:nil) ))

#ELIMINATED
# Forall ?x ?y ?o ?v ?l1 ?l2 ?r (
#   rif:error() :- And (
#			 _checkDisjointProperties(?r ?l1)
#			 _checkDisjointProperties(?r ?l2)
#			 Not(?l1 = ?l2)
#			 ?l1[rdf:first->?x]
#			 ?l2[rdf:first->?y]
#			 ?o[?x->?v]
#			 ?o[?y->?v] ))

#AUXILIARY ELIMINATION
#(* <#cax-adc> *)
# Forall ?r ?l (
#   _checkDisjointClasses(?r ?l) :- And (
#		 ?r[rdf:type -> owl:AllDisjointClasses]
#		 ?r[owl:members -> ?l] ))

#AUXILIARY ELIMINATION
# Forall ?r ?l ?x (
#	 _checkDisjointClasses(?r ?l) :- And (
#		 _checkDisjointClasses(?r ?x)
#		 ?x[rdf:rest->?l]
#		 Not(?l = rdf:nil) ))

#ELIMINATED
# Forall ?x ?y ?o ?l1 ?l2 ?r (
#   rif:error() :- And (
#			 _checkDisjointClasses(?r ?l1)
#			 _checkDisjointClasses(?r ?l2)
#			 Not(?l1 = ?l2)
#			 ?l1[rdf:first->?x]
#			 ?l2[rdf:first->?y]
#			 ?o[rdf:type->?x]
#			 ?o[rdf:type->?y] ))

#AUXILIARY ELIMINATION
#(* <#prp-spo2> *)
# Forall ?p ?pc (
#	 _markCheckChain(?p ?pc) :- ?p[owl:propertyChainAxiom->?pc] )

#AUXILIARY ELIMINATION
# Forall ?p ?pc (
#	 _markCheckChain(?p ?pc) :- And (
#		 _markCheckChain(?p ?q)
#		 ?q[rdf:rest->?pc]
#		 Not(?pc = rdf:nil) ))

#ELIMINATED 
# Forall ?q ?start ?pc ?last ?p (
#   _checkChain(?q ?start ?pc  ?last) :- And (
#			 _markCheckChain(?q ?pc)
#       ?pc[rdf:first->?p]
#			 ?pc[rdf:rest->rdf:nil]
#       ?start[?p->?last] ))

#ELIMINATED
# Forall ?q ?start ?pc ?last ?p ?tl (
#   _checkChain(?q ?start ?pc  ?last) :- And (
#       ?pc[rdf:first->?p]
#			 ?pc[rdf:rest->?tl]
#       ?start[?p->?next]
#       _checkChain(?q ?next ?tl ?last) ))

#SPLIT
#AUXILIARY ELIMINATION
# Forall ?p ?last ?pc ?start (
#   ?start[?p->?last] :- And (
#       ?p[owl:propertyChainAxiom->?pc]
#       _checkChain(?p ?start ?pc ?last)
#			 {NOTIN}{$MPT} ?p{/NOTIN} ))

#AUXILIARY ELIMINATION
# Forall ?p ?last ?pc ?start (
#   ?start[?p->?last] :- And (
#       ?p[owl:propertyChainAxiom->?pc]
#       _checkChain(?p ?start ?pc ?last)
#			 {IN}{$MP} ?p{/IN} ))

#AUXILIARY ELIMINATION
# Forall ?p ?last ?pc ?start (
#   ?start[rdf:type->?last] :- And (
#       rdf:type[owl:propertyChainAxiom->?pc]
#       _checkChain(rdf:type ?start ?pc ?last)
#			 {NOTIN}{$MC} ?last{/NOTIN} ))

##AUXILIARY ELIMINATION
# Forall ?p ?last ?pc ?start (
#   ?start[rdf:type->?last] :- And (
#       rdf:type[owl:propertyChainAxiom->?pc]
#       _checkChain(rdf:type ?start ?pc ?last)
#			 {IN}{$MC} ?last{/IN} ))

#ELIMINATED
#(* <#cls-int1> *)
# Forall ?c ?l ?y ?ty (
#   _allTypes(?c ?l ?y) :- And (
#		 _markAllTypes(?c ?l)
#     ?l[rdf:first->?ty]
#		 ?l[rdf:rest->rdf:nil]
#     ?y[rdf:type->?ty] ))

#ELIMINATED
# Forall ?c ?l ?y ?ty ?tl (
#   _allTypes(?c ?l ?y) :- And (
#     ?l[rdf:first->?ty]
#		 ?l[rdf:rest->?tl]
#     ?y[rdf:type->?ty]
#     _allTypes(?c ?tl ?y) ))

#SPLIT
#AUXILIARY ELIMINATION
# Forall ?y ?c ?l (
#   ?y[rdf:type->?c] :- And (
#     ?c[owl:intersectionOf->?l]
#     _allTypes(?c ?l ?y)
#		 {NOTIN}{$MC} ?c{/NOTIN} ))

#AUXILIARY ELIMINATION
# Forall ?y ?c ?l (
#   ?y[rdf:type->?c] :- And (
#     ?c[owl:intersectionOf->?l]
#     _allTypes(?c ?l ?y)
#		 {IN}{$MC} ?c{/IN} ))

#AUXILIARY ELIMINATION
#(* <#prp-key> *)
# Forall ?c ?u (
#   _markSameKey(?c ?u) :- ?c[owl:hasKey->?u] )

#AUXILIARY ELIMINATION
# Forall ?c ?u ?v (
#   _markSameKey(?c ?u) :- And (
#     _markSameKey(?c ?v)
#		 ?v[rdf:rest->?u]
#		 Not(?u = rdf:nil) ))

#ELIMINATED
# Forall ?c ?u ?x ?y (
#   _sameKey(?c ?u ?x ?y) :- And (
#     _markSameKey(?c ?u)
#     ?u[rdf:first->?key]
#		 ?u[rdf:rest->rdf:nil]
#     ?x[?key->?v] ?y[?key->?v] ))

#ELIMINATED
# Forall ?c ?u ?x ?y (
#   _sameKey(?c ?u ?x ?y) :- And (
#     ?u[rdf:first->?key]
#		 ?u[rdf:rest->?tl]
#     ?x[?key->?v] ?y[?key->?v]
#     _sameKey(?c ?tl ?x ?y) ))

#ELIMINATED
# Forall ?x ?y ?c ?u (
#   ?x[owl:sameAs->?y] :- And (
#     ?c[owl:hasKey->?u]  ?x[rdf:type->?c]  ?y[rdf:type->?c]
#     _sameKey(?c ?u ?x ?y) ))

#SPLIT
(* <#cls-uni> *)
 Forall ?y ?c ?l ?ci (
   ?y[rdf:type->?c] :- And (
		 _checkUnionOf(?c ?l)
		 ?l[rdf:first->?ci]
     ?y[rdf:type->?ci]
		 {NOTIN}{$MC} ?c{/NOTIN} ))

#ELIMINATED
# Forall ?y ?c ?l ?ci (
#   ?y[rdf:type->?c] :- And (
#		 _checkUnionOf(?c ?l)
#		 ?l[rdf:first->?ci]
#     ?y[rdf:type->?ci]
#		 {IN}{$MC} ?c{/IN} ))

(* <#cls-oo> *)
 Forall ?c ?l (
	 _checkOneOf(?c ?l) :- ?c[owl:oneOf->?l] )

 Forall ?c ?l ?r (
   _checkOneOf(?c ?l) :- And (
		 _checkOneOf(?c ?r)
		 ?r[rdf:rest->?l]
		 Not(?l = rdf:nil) ))

#SPLIT
 Forall ?yi ?c ?l (
   ?yi[rdf:type->?c] :- And (
     _checkOneOf(?c ?l)
		 ?l[rdf:first->?yi]
		 {NOTIN}{$MC} ?c{/NOTIN} ))

 Forall ?yi ?c ?l (
   ?yi[rdf:type->?c] :- And (
     _checkOneOf(?c ?l)
		 ?l[rdf:first->?yi]
		 {IN}{$MC} ?c{/IN} ))

#SPLIT
(* <#cls-int2> *)
 Forall ?y ?c ?ci ?l (
   ?y[rdf:type->?ci] :- And (
		 _markAllTypes(?c ?l)
		 ?l[rdf:first->?ci]
     ?y[rdf:type->?c]
		 {NOTIN}{$MC} ?ci{/NOTIN} ))

#ELIMINATED
# Forall ?y ?c ?ci ?l (
#   ?y[rdf:type->?ci] :- And (
#		 _markAllTypes(?c ?l)
#		 ?l[rdf:first->?ci]
#     ?y[rdf:type->?c]
#		 {IN}{$MC} ?ci{/IN} ))

#EOF
